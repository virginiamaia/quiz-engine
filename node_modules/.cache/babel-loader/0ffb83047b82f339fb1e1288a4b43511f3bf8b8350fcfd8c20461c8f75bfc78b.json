{"ast":null,"code":"var _jsxFileName = \"C:\\\\_programas\\\\quiz-engine\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport questionsData from '../data/questions.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Quiz = () => {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState({});\n  const handleAnswer = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    console.log(`Handling answer for ${name}. Type: ${type}, Value: ${value}, Checked: ${checked}`);\n    if (type === 'checkbox') {\n      setAnswers(prevAnswers => ({\n        ...prevAnswers,\n        [name]: {\n          ...(prevAnswers[name] || {}),\n          [value]: checked\n        }\n      }));\n    } else {\n      setAnswers({\n        ...answers,\n        [name]: value\n      });\n    }\n  };\n  const handleNext = () => {\n    const currentQuestion = questionsData[currentQuestionIndex];\n    console.log('Current Question:', currentQuestion);\n    if (currentQuestion.type === 'one-choice') {\n      const selectedAnswer = answers[`question-${currentQuestion.id}`];\n      if (selectedAnswer) {\n        const isCorrect = selectedAnswer === currentQuestion.options[currentQuestion.correctOption];\n        alert(isCorrect ? 'Resposta correta!' : `Resposta incorreta. A resposta correta é: ${currentQuestion.options[currentQuestion.correctOption]}`);\n      } else {\n        alert('Nenhuma opção selecionada.');\n      }\n    }\n    if (currentQuestion.type === 'multiple-choice') {\n      const selectedAnswers = answers[`question-${currentQuestion.id}`] || {};\n      const correctAnswers = new Set(currentQuestion.correctOptions);\n      const userAnswers = new Set(Object.keys(selectedAnswers).filter(key => selectedAnswers[key] === true).map(Number));\n      const isCorrect = correctAnswers.size === userAnswers.size && [...correctAnswers].every(answer => userAnswers.has(answer));\n      alert(isCorrect ? 'Resposta correta!' : `Resposta incorreta. As respostas corretas são: ${currentQuestion.correctOptions.map(index => currentQuestion.options[index]).join(', ')}`);\n    }\n    if (currentQuestion.type === 'input') {\n      const userAnswer = answers[`question-${currentQuestion.id}`] || '';\n      const isCorrect = userAnswer.trim() === currentQuestion.correctAnswer.trim(); // Comparação segura de strings\n      alert(isCorrect ? 'Resposta correta!' : `Resposta incorreta. A resposta correta é: ${currentQuestion.correctAnswer}`);\n    }\n    if (currentQuestionIndex < questionsData.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    }\n  };\n  const calculateProgress = () => {\n    return (currentQuestionIndex + 1) / questionsData.length * 100;\n  };\n  const currentQuestion = questionsData[currentQuestionIndex];\n  if (!currentQuestion) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Quiz completo!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n  console.log('Current Answers:', answers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      style: {\n        width: `${calculateProgress()}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentQuestion.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), currentQuestion.type === 'one-choice' && currentQuestion.options && currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: `question-${currentQuestion.id}`,\n            value: option,\n            onChange: handleAnswer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this), option]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)), currentQuestion.type === 'multiple-choice' && currentQuestion.options && currentQuestion.options.map((option, index) => {\n        var _answers;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: `question-${currentQuestion.id}`,\n              value: index,\n              checked: ((_answers = answers[`question-${currentQuestion.id}`]) === null || _answers === void 0 ? void 0 : _answers[index]) || false,\n              onChange: handleAnswer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this), option]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this);\n      }), currentQuestion.type === 'input' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: `question-${currentQuestion.id}`,\n          value: answers[`question-${currentQuestion.id}`] || '',\n          onChange: handleAnswer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        disabled: currentQuestionIndex >= questionsData.length - 1,\n        children: \"Pr\\xF3xima\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Quiz, \"ILatPGejwxoTHpjxrCZSBw++8gE=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","questionsData","jsxDEV","_jsxDEV","Quiz","_s","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","handleAnswer","e","name","value","type","checked","target","console","log","prevAnswers","handleNext","currentQuestion","selectedAnswer","id","isCorrect","options","correctOption","alert","selectedAnswers","correctAnswers","Set","correctOptions","userAnswers","Object","keys","filter","key","map","Number","size","every","answer","has","index","join","userAnswer","trim","correctAnswer","length","calculateProgress","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","width","title","option","onChange","_answers","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/_programas/quiz-engine/src/components/Quiz.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport questionsData from '../data/questions.json';\r\n\r\nconst Quiz = () => {\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [answers, setAnswers] = useState({});\r\n\r\n  const handleAnswer = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n\r\n    console.log(`Handling answer for ${name}. Type: ${type}, Value: ${value}, Checked: ${checked}`);\r\n\r\n\r\n    if (type === 'checkbox') {\r\n      setAnswers(prevAnswers => ({\r\n        ...prevAnswers,\r\n        [name]: {\r\n          ...(prevAnswers[name] || {}),\r\n          [value]: checked,\r\n        },\r\n      }));\r\n    } else {\r\n      setAnswers({ ...answers, [name]: value });\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    const currentQuestion = questionsData[currentQuestionIndex];\r\n\r\n    console.log('Current Question:', currentQuestion);\r\n\r\n\r\n    if (currentQuestion.type === 'one-choice') {\r\n      const selectedAnswer = answers[`question-${currentQuestion.id}`];\r\n      if (selectedAnswer) {\r\n        const isCorrect = selectedAnswer === currentQuestion.options[currentQuestion.correctOption];\r\n        alert(isCorrect \r\n          ? 'Resposta correta!' \r\n          : `Resposta incorreta. A resposta correta é: ${currentQuestion.options[currentQuestion.correctOption]}`);\r\n      } else {\r\n        alert('Nenhuma opção selecionada.');\r\n      }\r\n    } \r\n    \r\n    if (currentQuestion.type === 'multiple-choice') {\r\n      const selectedAnswers = answers[`question-${currentQuestion.id}`] || {};\r\n      const correctAnswers = new Set(currentQuestion.correctOptions);\r\n      const userAnswers = new Set(Object.keys(selectedAnswers).filter(key => selectedAnswers[key] === true).map(Number));\r\n      \r\n      const isCorrect = correctAnswers.size === userAnswers.size && [...correctAnswers].every(answer => userAnswers.has(answer));\r\n      alert(isCorrect \r\n        ? 'Resposta correta!' \r\n        : `Resposta incorreta. As respostas corretas são: ${currentQuestion.correctOptions.map(index => currentQuestion.options[index]).join(', ')}`);\r\n    }\r\n    \r\n    if (currentQuestion.type === 'input') {\r\n      const userAnswer = answers[`question-${currentQuestion.id}`] || '';\r\n      const isCorrect = userAnswer.trim() === currentQuestion.correctAnswer.trim(); // Comparação segura de strings\r\n      alert(isCorrect \r\n        ? 'Resposta correta!' \r\n        : `Resposta incorreta. A resposta correta é: ${currentQuestion.correctAnswer}`);\r\n    }\r\n    \r\n    if (currentQuestionIndex < questionsData.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    }\r\n  };\r\n\r\n  const calculateProgress = () => {\r\n    return ((currentQuestionIndex + 1) / questionsData.length) * 100;\r\n  };\r\n\r\n  const currentQuestion = questionsData[currentQuestionIndex];\r\n\r\n  if (!currentQuestion) {\r\n    return <div>Quiz completo!</div>;\r\n  }\r\n\r\n  console.log('Current Answers:', answers);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"progress-bar\" style={{ width: `${calculateProgress()}%` }}></div>\r\n      <div className=\"question-container\">\r\n        <h2>{currentQuestion.title}</h2>\r\n        {currentQuestion.type === 'one-choice' && currentQuestion.options && (\r\n          currentQuestion.options.map((option, index) => (\r\n            <div key={index}>\r\n              <label>\r\n                <input\r\n                  type=\"radio\"\r\n                  name={`question-${currentQuestion.id}`}\r\n                  value={option}\r\n                  onChange={handleAnswer}\r\n                />\r\n                {option}\r\n              </label>\r\n            </div>\r\n          ))\r\n        )}\r\n        {currentQuestion.type === 'multiple-choice' && currentQuestion.options && (\r\n          currentQuestion.options.map((option, index) => (\r\n            <div key={index}>\r\n              <label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  name={`question-${currentQuestion.id}`}\r\n                  value={index}\r\n                  checked={answers[`question-${currentQuestion.id}`]?.[index] || false}\r\n                  onChange={handleAnswer}\r\n                />\r\n                {option}\r\n              </label>\r\n            </div>\r\n          ))\r\n        )}\r\n        {currentQuestion.type === 'input' && (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              name={`question-${currentQuestion.id}`}\r\n              value={answers[`question-${currentQuestion.id}`] || ''}\r\n              onChange={handleAnswer}\r\n            />\r\n          </div>\r\n        )}\r\n        <button onClick={handleNext} disabled={currentQuestionIndex >= questionsData.length - 1}>\r\n          Próxima\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}